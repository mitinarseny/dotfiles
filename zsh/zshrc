#!/bin/zsh

zmodload zsh/zprof

unsetopt MAIL_WARNING       # Don't print a warning message if a mail file has been accessed.
setopt NOTIFY               # Report status of background jobs immediately.

setopt HIST_BEEP            # Beep when accessing non-existent history.
setopt HIST_FIND_NO_DUPS    # skip duplicate adjacent search results

unsetopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt AUTO_NAME_DIRS

setopt INTERACTIVE_COMMENTS # support for comments in command line mode

LANG=${LANG:-en_US.UTF-8}
WORDCHARS='*?_-~=&;!#$%^<>'

export EDITOR=$(command -v nvim || echo 'vim')
command -v less &> /dev/null && export PAGER='less'
command -v code &> /dev/null && export VEDITOR='code'

# Hitory
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=$HOME/.zsh_history
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_SAVE_NO_DUPS
setopt EXTENDED_HISTORY

CASE_SENSITIVE=0

export CLICOLOR=1

# https://github.com/arcticicestudio/nord-dircolors
export LS_COLORS='no=00:rs=0:fi=00:di=01;34:ln=36:mh=04;36:pi=04;01;36:so=04;33:do=04;01;36:bd=01;33:cd=33:or=31:mi=01;37;41:ex=01;36:su=01;04;37:sg=01;04;37:ca=01;37:tw=01;37;44:ow=01;04;34:st=04;37;44:*.7z=01;32:*.ace=01;32:*.alz=01;32:*.arc=01;32:*.arj=01;32:*.bz=01;32:*.bz2=01;32:*.cab=01;32:*.cpio=01;32:*.deb=01;32:*.dz=01;32:*.ear=01;32:*.gz=01;32:*.jar=01;32:*.lha=01;32:*.lrz=01;32:*.lz=01;32:*.lz4=01;32:*.lzh=01;32:*.lzma=01;32:*.lzo=01;32:*.rar=01;32:*.rpm=01;32:*.rz=01;32:*.sar=01;32:*.t7z=01;32:*.tar=01;32:*.taz=01;32:*.tbz=01;32:*.tbz2=01;32:*.tgz=01;32:*.tlz=01;32:*.txz=01;32:*.tz=01;32:*.tzo=01;32:*.tzst=01;32:*.war=01;32:*.xz=01;32:*.z=01;32:*.Z=01;32:*.zip=01;32:*.zoo=01;32:*.zst=01;32:*.aac=32:*.au=32:*.flac=32:*.m4a=32:*.mid=32:*.midi=32:*.mka=32:*.mp3=32:*.mpa=32:*.mpeg=32:*.mpg=32:*.ogg=32:*.opus=32:*.ra=32:*.wav=32:*.3des=01;35:*.aes=01;35:*.gpg=01;35:*.pgp=01;35:*.doc=32:*.docx=32:*.dot=32:*.odg=32:*.odp=32:*.ods=32:*.odt=32:*.otg=32:*.otp=32:*.ots=32:*.ott=32:*.pdf=32:*.ppt=32:*.pptx=32:*.xls=32:*.xlsx=32:*.app=01;36:*.bat=01;36:*.btm=01;36:*.cmd=01;36:*.com=01;36:*.exe=01;36:*.reg=01;36:*~=02;37:*.bak=02;37:*.BAK=02;37:*.log=02;37:*.log=02;37:*.old=02;37:*.OLD=02;37:*.orig=02;37:*.ORIG=02;37:*.swo=02;37:*.swp=02;37:*.bmp=32:*.cgm=32:*.dl=32:*.dvi=32:*.emf=32:*.eps=32:*.gif=32:*.jpeg=32:*.jpg=32:*.JPG=32:*.mng=32:*.pbm=32:*.pcx=32:*.pgm=32:*.png=32:*.PNG=32:*.ppm=32:*.pps=32:*.ppsx=32:*.ps=32:*.svg=32:*.svgz=32:*.tga=32:*.tif=32:*.tiff=32:*.xbm=32:*.xcf=32:*.xpm=32:*.xwd=32:*.xwd=32:*.yuv=32:*.anx=32:*.asf=32:*.avi=32:*.axv=32:*.flc=32:*.fli=32:*.flv=32:*.gl=32:*.m2v=32:*.m4v=32:*.mkv=32:*.mov=32:*.MOV=32:*.mp4=32:*.mpeg=32:*.mpg=32:*.nuv=32:*.ogm=32:*.ogv=32:*.ogx=32:*.qt=32:*.rm=32:*.rmvb=32:*.swf=32:*.vob=32:*.webm=32:*.wmv=32:'

_zcompinit_custom() {
  autoload -Uz compinit
  local zcd="${HOME}/.zcompdump"
  local zcdc="${zcd}.zwc"
  # Compile the completion dump to increase startup speed, if dump is newer or doesn't exist,
  # in the background as this is doesn't affect the current session
  if [[ -f "${zcd}"(#qN.m+1) ]]; then
        compinit -i -d "${zcd}"
        { rm -f "${zcdc}" && zcompile "${zcd}" } &!
  else
        compinit -C -d "${zcd}"
        { [[ ! -f "${zcdc}" || "${zcd}" -nt "${zcdc}" ]] && rm -f "${zcdc}" && zcompile "${zcd}" } &!
  fi
}

[ -d ~/.local/bin ] || mkdir -p ~/.local/bin
export PATH="${HOME}/.local/bin:${PATH}"

fpath+=("${${(%):-%x}:P:h}/functions")
autoload -Uz ${${(%):-%x}:P:h}/functions/*(.:t)

typeset -U config_files
# https://www.reddit.com/r/zsh/comments/alkq5a/how_can_i_change_the_default_location_of_zshrc/egaw8q9
config_files=(${${(%):-%x}:P:h:h}/**/*.zsh)
# ignore all *.zsh files starting with underscore
config_files=(${config_files:#**/_*.zsh})

# load the path files
for file in ${(M)config_files:#*/path.zsh}; do
  . "${file}"
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  . "${file}"
done

# init completion
_zcompinit_custom

# load plugins
if [ -r "${HOME}/.zsh_plugins.sh" ]; then
  . "${${(%):-%x}:P:h}/_pre_plugins.zsh"
  . "${HOME}/.zsh_plugins.sh"
  . "${${(%):-%x}:P:h}/_post_plugins.zsh"
fi

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}; do
  . "${file}"
done

unset config_files

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
[ -r "${HOME}/.localrc" ] && . "${HOME}/.localrc"

# remove duplicated from PATH
typeset -U PATH

# do not highlight pasted text
zle_highlight=('paste:none')

# unbind vi mode
bindkey -r '\e'

# Ctrl+Z to bring back last suspended job
_zsh_cli_fg() { fg; }
zle -N _zsh_cli_fg
bindkey '^Z' _zsh_cli_fg

# https://stackoverflow.com/a/30899296
_r-delregion() {
  if ((REGION_ACTIVE)) then
     zle kill-region
  else 
    local widget_name=$1
    shift
    zle $widget_name -- $@
  fi
}

_r-deselect() {
  ((REGION_ACTIVE = 0))
  local widget_name=$1
  shift
  zle $widget_name -- $@
}

_r-select() {
  ((REGION_ACTIVE)) || zle set-mark-command
  local widget_name=$1
  shift
  zle $widget_name -- $@
}

for key     seq        mode      widget (
    sleft   $'\e[1;2D' select    backward-char
    sright  $'\e[1;2C' select    forward-char
    sup     $'\e[1;2A' select    up-line-or-history
    sdown   $'\e[1;2B' select    down-line-or-history
    
    send    $'\e[1;2F' select    end-of-line
    send2   $'\e[4;2~' select    end-of-line

    shome   $'\e[1;2H' select    beginning-of-line
    shome2  $'\e[1;2~' select    beginning-of-line

    left    $'\e[D'    deselect  backward-char
    right   $'\e[C'    deselect  forward-char

    end     $'\E[F'    deselect  end-of-line
    end2    $'\e[4~'   deselect  end-of-line

    home    $'\E[H'    deselect  beginning-of-line
    home2   $'\e[1~'   deselect  beginning-of-line

    csleft  $'\e[1;6D' select    backward-word
    csright $'\e[1;6C' select    forward-word
    csend   $'\e[1;6F' select    end-of-line
    cshome  $'\e[1;6H' select    beginning-of-line

    cleft   $'\e[1;5D' deselect  backward-word
    aleft   $'\e[1;3D' deselect  backward-word
    cright  $'\e[1;5C' deselect  forward-word
    aright  $'\e[1;3C' deselect  forward-word

    del     $'\e[3~'   delregion delete-char
    bs      $'^?'      delregion backward-delete-char
  ) {
  functions[key-$key]="_r-$mode $widget"
  zle -N key-$key
  bindkey "${seq}" key-$key
}

bindkey '\e^?'    backward-kill-word

